generate_charts_funcs.py:27:def generate_charts(fname, data_frame, sheet_name):
initialise_pyorator.py:29:def initiation(form):
initialise_pyorator.py:44:def _read_setup_file(pyorator_str):
initialise_pyorator.py:100:def _write_default_setup_file(setup_file):
initialise_pyorator.py:159:def _write_default_config_file(config_file):
initialise_pyorator.py:173:def read_config_file(form):
initialise_pyorator.py:206:def write_config_file(form, message_flag=True):
ora_classes_main.py:34:    def __init__(self, crop_mngmnt, ora_parms):
ora_classes_main.py:91:    def __init__(self, orator_obj):
ora_classes_main.py:147:    def append_vars(self, imnth, crop_vars, rate_mod, t_depth, t_grow, nut_n_soil, n_crop, min_no3_nh4,
ora_classes_main.py:274:    def __init__(self):
ora_classes_main.py:297:    def append_vars(self, period_yrs, imnth, tstep, air_temp, wat_soil, wc_t0, rate_mod, c_pi_mnth, org_inp_ss, pool_c_dpm,

ora_classes_n.py:28:    def __init__(self, orator_obj):
ora_classes_n.py:54:    def append_vars(self, no3_avail, n_denit_max, rate_denit_no3, wc_pwp, wat_soil, wc_fld_cap,
ora_classes_n.py:83:    def __init__(self, orator_obj):
ora_classes_n.py:102:    def append_vars(self, precip, n_appl_fert, n_appl_fym, nh4_volat, no3_loss_adj):
ora_classes_n.py:116:    def __init__(self, orator_obj):
ora_classes_n.py:136:    def append_vars(self, nh4_start, nh4_total_inp, no3_nitrif, no3_loss_adj):
ora_classes_n.py:147:    def __init__(self, orator_obj):
ora_classes_n.py:168:    def append_vars(self, wc_start, rain_effect, no3_start, no3_inputs, wat_drain, no3_leach_tstep,
ora_classes_n.py:182:    def __init__(self):
ora_classes_n.py:201:    def append_vars(self, soil_n_supply_A2a, lu, crop_vars):
ora_classes_n.py:231:    def __init__(self):
ora_classes_n.py:285:    def append_vars(self, som_change_A1, c_n_rat_som, c_n_rat_pi, org_inp_ss, dpm_hum_rat, c_n_rat,

ora_economics_model.py:23:def test_economics_algorithms(form):

ora_excel_read.py:37:def check_excel_input_file(form, xls_inp_fname):
ora_excel_read.py:89:def _read_location_sheet(xls_fname, sheet_name, skip_until):
ora_excel_read.py:103:def _read_n_constants_sheet(xls_fname, sheet_name, skip_until):
ora_excel_read.py:120:def _read_crop_mngmnt_sheet(xls_fname, sheet_name, skip_until, crop_vars):
ora_excel_read.py:163:def _extract_weather(pettmp_dframe, year_strt, year_end, indx):
ora_excel_read.py:172:def _read_weather_sheet(xls_fname, sheet_name, skip_until):
ora_excel_read.py:197:def _read_crop_vars(xls_fname, sheet_name):
ora_excel_read.py:234:def _read_organic_waste_sheet(xls_fname, sheet_name, skip_until):
ora_excel_read.py:258:    def __init__(self, xls_inp_fname, out_dir, output_excel = True):
ora_excel_read.py:273:    def __init__(self, xls_inp_fname, latitude):
ora_excel_read.py:300:    def __init__(self, xls_inp_fname):
ora_excel_read.py:318:    def __init__(self, xls_inp_fname, crop_vars):
ora_excel_read.py:336:    def __init__(self, soil_slice):
ora_excel_read.py:362:    def __init__(self, crop_slice):

ora_excel_write.py:28:def check_out_dir(form):
ora_excel_write.py:49:def retrieve_output_xls_files(form, study_name):
ora_excel_write.py:64:def write_excel_out(out_dir, output_obj, study, sheet_name):

ora_forward_run.py:40:def cn_forward_run(parameters, weather, management, soil_vars, study, subplot):

ora_high_level_fns.py:45:def _cn_steady_state(parameters, weather, management, soil_vars, study, subplot):
ora_high_level_fns.py:152:def test_soil_cn_algorithms(form):

ora_livestock_model.py:23:def test_livestock_algorithms(form):

ora_low_level_fns.py:28:def populate_org_fert(org_fert):
ora_low_level_fns.py:54:def init_pools_losses_carbon(soil_vars):
ora_low_level_fns.py:84:def get_values_for_time_step(pettmp, management, ow_parms, tstep):
ora_low_level_fns.py:102:def compare_pools(pool_prev, pool_current):
ora_low_level_fns.py:113:def get_rate_temp(air_temp, pH, wc_fld_cap, wc_pwp, wc_tstep):
ora_low_level_fns.py:133:def carbon_lost_from_pool(c_in_pool, k_rate_constant, rate_mod):
ora_low_level_fns.py:139:def plant_inputs_crops_distribution(c_pi_yr, t_sow, t_harv, annual_flag = True):
ora_low_level_fns.py:166:def inert_organic_carbon(prop_iom_in_ow, c_ow ):
ora_low_level_fns.py:177:def average_weather(latitude, precip, tair):
ora_low_level_fns.py:211:def miami_dyce(land_cover_type, tair, precip):
ora_low_level_fns.py:245:def update_progress(last_time, iteration, tot_soc_meas, tot_soc_simul,

ora_nh4_fns.py:45:def _nh4_atmos_deposition(n_atmos_depos, proportion = 0.5):
ora_nh4_fns.py:55:def _nh4_fert_inputs(fert_amount):
ora_nh4_fns.py:65:def nh4_mineralisation(soil_n_supply):
ora_nh4_fns.py:80:def nh4_immobilisation(n_soil_supply, nh4_min):
ora_nh4_fns.py:91:def nh4_nitrification(nh4, nh4_min, rate_mod, k_nitrif):
ora_nh4_fns.py:105:def nh4_volatilisation(precip, nh4_manure, nh4_fert):
ora_nh4_fns.py:123:def nh4_crop_uptake(n_crop, no3_avail, nh4_avail):

ora_nitrogen_fns.py:33:def loss_adjustment_ratio(n_start, n_sum_inputs, n_sum_losses):
ora_nitrogen_fns.py:44:def _fertiliser_inputs(fert_amount):
ora_nitrogen_fns.py:54:def _nitrified_ammonium(n_nh4):
ora_nitrogen_fns.py:68:def no3_immobilisation(soil_n_supply, nh4_immob, min_no3_nh4):
ora_nitrogen_fns.py:76:def no3_leaching(precip, wc_start, pet, wc_fld_cap, no3_start, no3_inputs, no3_min):
ora_nitrogen_fns.py:97:def no3_denitrification(imnth, t_depth, wat_soil, wc_pwp, wc_fld_cap, co2_aerobic_decomp, no3_avail,
ora_nitrogen_fns.py:130:def no3_crop_uptake(prop_n_opt, n_respns_coef, nut_n_opt, t_grow, no3_avail, nh4_avail):

ora_water_model.py:38:def _theta_values(pcnt_c, pcnt_clay, pcnt_silt, pcnt_sand, halaba_flag = True):
ora_water_model.py:57:def get_soil_water_constants(soil_vars):
ora_water_model.py:76:def add_pet_to_weather(latitude, pettmp_grid_cell):
ora_water_model.py:115:def soil_water(ntimestep, precip, pet, irrigation, wc_fld_cap, wc_pwp, wc_t0, wc_t1):
ora_water_model.py:135:    def __init__(self, dpth_soil_root_rat):
ora_water_model.py:157:    def append_vars(self, max_root_dpth, precip, pet, pcnt_c, wc_pwp, wat_soil, wc_fld_cap):

PyOratorGUI.py:31:    def __init__(self, parent=None):
PyOratorGUI.py:163:    def displayXlsxOutputClicked(self):
PyOratorGUI.py:173:    def runEconomicsClicked(self):
PyOratorGUI.py:177:    def runLivestockClicked(self):
PyOratorGUI.py:181:    def runSoilCnClicked(self):
PyOratorGUI.py:185:    def fetchInpExcel(self):
PyOratorGUI.py:195:    def cancelClicked(self):
PyOratorGUI.py:199:    def exitClicked(self):
PyOratorGUI.py:206:    def close_down(self):
PyOratorGUI.py:227:    def saveClicked(self):
PyOratorGUI.py:233:def main():
